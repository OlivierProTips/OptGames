# Create foncitons db


CREATE TABLE "challenges" ( "id"	INTEGER NOT NULL UNIQUE, "title"	TEXT NOT NULL, "description"	TEXT, "flag"	TEXT NOT NULL, "file_url"	TEXT, "type"	TEXT NOT NULL, "order"	INTEGER NOT NULL DEFAULT 100, PRIMARY KEY("id" AUTOINCREMENT) )
CREATE TABLE "results" ( "user_id"	INTEGER NOT NULL, "challenge_id"	INTEGER NOT NULL, PRIMARY KEY("challenge_id","user_id"), FOREIGN KEY("challenge_id") REFERENCES "challenges"("id"), FOREIGN KEY("user_id") REFERENCES "users"("id") )
CREATE TABLE "users" ( "id"	INTEGER NOT NULL UNIQUE, "name"	TEXT NOT NULL UNIQUE, PRIMARY KEY("id" AUTOINCREMENT) )

Voici la structure des ma base de données sqlite.
Il me faudrait des fonctions python pour :
- Lire la table "user"
- Vérifier si un couple id de la table "challenge" et id de la table "user" existe dans la table "results"
- Lire la table "challenge"
- Ecrire dans la table "result"
- Calculer le nombre de challenge_id de la table "result" par user_id

Note : il faut éviter les injections SQL

# Création challenges

J'ai une base sqlite : 
REATE TABLE "challenges" ( "id"	INTEGER NOT NULL UNIQUE, "title"	TEXT NOT NULL, "description"	TEXT, "flag"	TEXT NOT NULL, "file_url"	TEXT, "type"	TEXT NOT NULL, PRIMARY KEY("id" AUTOINCREMENT) )

Voici ma structure de fichier :
Un répertoire assets, qui contient un répertoire files qui accueillera les fichiers des challenges
Un repertoire challenges qui contient des sous-répertoires représentant les challenges. Le nom du répertoire est le nom du challenge, à insérer dans la table "challenges" s'il n'existe pas.
Dans chaque sous-répertoire : 
- il y a un fichier description.txt qui contient la description du challenge à insérer dans le champ "description"
- il y a un fichier flag.txt qui contient un texte à insérer dans le champ "flag"
- si un répertoire "file" existe (il ne peut contenir qu'un fichier), alors il faut copier le fichier dans assets/files dans un sous-répertoire au nom du challenge, et insérer dans le champ "file_url" le chemin vers le fichier à partir de /assets
- Pour le champ type :
    - s'il y a un répertoire file, alors type = file
    - sinon type = simple

A faire en python

# Site

Voici ma base de données game.db:
CREATE TABLE "challenges" ( "id"	INTEGER NOT NULL UNIQUE, "title"	TEXT NOT NULL, "description"	TEXT, "flag"	TEXT NOT NULL, "file_url"	TEXT, "type"	TEXT NOT NULL, "order"	INTEGER NOT NULL DEFAULT 100, PRIMARY KEY("id" AUTOINCREMENT) )
CREATE TABLE "results" ( "user_id"	INTEGER NOT NULL, "challenge_id"	INTEGER NOT NULL, PRIMARY KEY("challenge_id","user_id"), FOREIGN KEY("challenge_id") REFERENCES "challenges"("id"), FOREIGN KEY("user_id") REFERENCES "users"("id") )
CREATE TABLE "users" ( "id"	INTEGER NOT NULL UNIQUE, "name"	TEXT NOT NULL UNIQUE, PRIMARY KEY("id" AUTOINCREMENT) )

ok, maintenant, j'ai besoin de faire un site web en python pour afficher les challenges.
Déjà, si la table users est vide, on affiche un message "no user".
Sinon, on affiche une page demandant de cliquer sur un user pour voir les challenges.
Une fois sur la page des challenges, il faut des blocs. Chaque bloc (ou partie) représente un challenge avec son titre, sa description, un lien pour télécharger le fichier si type = file et file_url est non null (file_url contient le chemin pour télécharger le fichier), et un champ de saisi pour saisir le flag. Si le flag saisi est correct, on peut mettre une checkmark verte à côté du titre.
Et il faut que ce soit plutôt joli, tu peux utiliser un framework de type boostrap si tu veux

En haut de la page, il me faut afficher le nom de l'utilisateur, ainsi qu'un compteur de cahllenges réussis (ex: 2/5)

Il me faut aussi une page pour afficher les résultats de tous les users, classé avec le meilleur en haut